@page "/shipments"
@using client.Services
@using client.Models
@inject IShipmentService ShipmentService
@inject IJSRuntime JSRuntime

<PageTitle>All Shipments - Container Shipment Tracker</PageTitle>

<div class="row mb-4">
    <div class="col-md-8">
        <h2 class="display-5 text-primary mb-3">
            <i class="fas fa-list me-3"></i>
            All Shipments
        </h2>
    </div>
    <div class="col-md-4 text-end">
        <a href="/shipments/create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>
            Add New Shipment
        </a>
    </div>
</div>

<!-- Search and Filter -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterShipments" 
                   class="form-control" placeholder="Search by Container ID, Port, or Status..." />
        </div>
    </div>
    <div class="col-md-3">
        <select @bind="statusFilter" @bind:event="onchange" class="form-select">
            <option value="">All Statuses</option>
            <option value="In Transit">In Transit</option>
            <option value="Delayed">Delayed</option>
            <option value="Delivered">Delivered</option>
            <option value="Arrived at Port">Arrived at Port</option>
        </select>
    </div>
    <div class="col-md-3">
        <button @onclick="LoadShipments" class="btn btn-outline-secondary w-100">
            <i class="fas fa-sync-alt me-2"></i>
            Refresh
        </button>
    </div>
</div>

@if (loading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading shipments...</p>
    </div>
}
else if (filteredShipments.Any())
{
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">
                Showing @filteredShipments.Count of @allShipments.Count shipments
            </h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Container ID</th>
                            <th>Route</th>
                            <th>Departure</th>
                            <th>Status</th>
                            <th>ETA</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var shipment in filteredShipments)
                        {
                            <tr>
                                <td>
                                    <strong class="text-primary">@shipment.ContainerId</strong>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span class="badge bg-light text-dark me-2">@shipment.OriginPort</span>
                                        <i class="fas fa-arrow-right text-muted mx-1"></i>
                                        <span class="badge bg-light text-dark ms-2">@shipment.DestinationPort</span>
                                    </div>
                                </td>
                                <td>
                                    @shipment.DepartureDate.ToString("MMM dd, yyyy")
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(shipment.Status)">
                                        @shipment.Status
                                    </span>
                                </td>
                                <td>
                                    <div>
                                        @shipment.Eta.ToString("MMM dd, yyyy")
                                        @if (shipment.Eta < DateTime.Now && shipment.Status != "Delivered")
                                        {
                                            <small class="text-danger d-block">
                                                <i class="fas fa-exclamation-triangle"></i> Overdue
                                            </small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <small class="text-muted">
                                        @shipment.UpdatedAt.ToString("MMM dd, HH:mm")
                                    </small>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/shipments/@shipment.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/shipments/@shipment.Id/edit" class="btn btn-sm btn-outline-warning">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button @onclick="() => DeleteShipment(shipment.Id)" 
                                                class="btn btn-sm btn-outline-danger"
                                                @onclick:preventDefault="true">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(statusFilter))
            {
                <i class="fas fa-ship fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No shipments found</h5>
                <p class="text-muted">Get started by adding your first shipment.</p>
                <a href="/shipments/create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>
                    Add Shipment
                </a>
            }
            else
            {
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No matching shipments</h5>
                <p class="text-muted">Try adjusting your search criteria.</p>
                <button @onclick="ClearFilters" class="btn btn-outline-primary">
                    <i class="fas fa-times me-2"></i>
                    Clear Filters
                </button>
            }
        </div>
    </div>
}

@code {
    private List<Shipment> allShipments = new();
    private List<Shipment> filteredShipments = new();
    private bool loading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadShipments();
    }

    private async Task LoadShipments()
    {
        loading = true;
        try
        {
            allShipments = await ShipmentService.GetShipmentsAsync();
            FilterShipments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading shipments: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterShipments()
    {
        filteredShipments = allShipments.Where(s =>
            (string.IsNullOrEmpty(searchTerm) || 
             s.ContainerId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             s.OriginPort.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             s.DestinationPort.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             s.Status.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(statusFilter) || s.Status == statusFilter)
        ).OrderByDescending(s => s.UpdatedAt).ToList();
        
        StateHasChanged();
    }

    private string statusFilter
    {
        get => _statusFilter;
        set
        {
            _statusFilter = value;
            FilterShipments();
        }
    }
    private string _statusFilter = string.Empty;

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        _statusFilter = string.Empty;
        FilterShipments();
    }

    private async Task DeleteShipment(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this shipment?");
        if (confirmed)
        {
            try
            {
                await ShipmentService.DeleteShipmentAsync(id);
                await LoadShipments();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting shipment: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting shipment. Please try again.");
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "In Transit" => "bg-success",
            "Delayed" => "bg-warning",
            "Delivered" => "bg-info",
            "Arrived at Port" => "bg-primary",
            _ => "bg-secondary"
        };
    }
}
